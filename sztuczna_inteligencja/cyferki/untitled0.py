# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yTDyl69xT4P5LXCrimF-RluNvClHlKID
"""

import tensorflow as tf
from PIL import Image
from numpy import asarray
import numpy as np
import matplotlib.pyplot as plt

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))
print("TensorFlow version: ", tf.__version__)
tf.device('/device:GPU:0')

from google.colab import drive
drive.mount('/content/drive')

mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10)
])

predictions = model(x_train[:1]).numpy()
predictions

tf.nn.softmax(predictions).numpy()

loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
loss_fn(y_train[:1],predictions).numpy()

model.compile(optimizer='adam',loss=loss_fn,metrics=['accuracy'])
model.fit(x_train,y_train, epochs=5)

model.evaluate(x_test,y_test,verbose=2)

image = Image.open('my_data/2a.jpg')
data = 1-asarray(image)/255.0
# print(data)
plt.imshow(data,cmap = plt.cm.binary)

my_datasetlist_x = [] 
my_datasetlist_y = []

for i in range(0,10):
  for a in ['a','b','c']:
    print("/content/drive/MyDrive/studia/dataset/" + str(i) + str(a)+ ".jpg")
    path = '/content/drive/MyDrive/studia/dataset/' + str(i) + str(a)+ '.jpg'
    img = Image.open(path)
    my_datasetlist_x.append( 1 - asarray(img)/255.0)
    my_datasetlist_y.append(i)

my_dataset_x = np.array(my_datasetlist_x)
my_dataset_y = np.array(my_datasetlist_y)
model.evaluate(my_dataset_x,my_dataset_y,verbose=2)

probability_model = tf.keras.Sequential([
  model,
  tf.keras.layers.Softmax()
])
# probability_model.compile()
output = probability_model(my_dataset_x).numpy()
for a in range(0,30):
  # plt.imshow(my_dataset_x[a],cmap = plt.cm.binary)
  x = Image.fromarray(my_dataset_x[a]*255.0)
  x.show()
  for i in range(0,10):
    print(str(i) + " - " +'%f' % output[a,i])  
  
# my_dataset_x